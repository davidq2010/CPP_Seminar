////////////////////////////////////////////////////////////////////////////////
/// @file
/// @brief Use case for ref qualified method in a class.
///
/// Avoiding unintended side effects on augmented assignment overloading. 
/// Illustrated with two classes. One that is not protected and one that is. 
////////////////////////////////////////////////////////////////////////////////

// STL
#include <iostream>
using namespace std;

////////////////////////////////////////////////////////////////////////////////
/// @brief Example of a class with unprotected assignment.
////////////////////////////////////////////////////////////////////////////////
class Unprotected {
  public:
    ////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor
    explicit Unprotected(int _i) : m_i{_i} {}

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Accessor
    int& get() {return m_i;}

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Augmented Assignment
    Unprotected& operator+=(const Unprotected& _a) {
      m_i += _a.m_i;
      return *this;
    }
  
  private:
    int m_i; ///< Data
};

////////////////////////////////////////////////////////////////////////////////
/// @brief Example of a class with protected assignment.
////////////////////////////////////////////////////////////////////////////////
class Protected {
  public:
    ////////////////////////////////////////////////////////////////////////////
    /// @brief Constructor
    explicit Protected(int _i) : m_i{_i} {}

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Accessor
    int& get() {return m_i;}

    ////////////////////////////////////////////////////////////////////////////
    /// @brief Augmented Assignment
    Protected& operator+=(const Protected& _a) & { // Only for references
      m_i += _a.m_i;
      return *this;
    }
  
  private:
    int m_i; ///< Data
};

////////////////////////////////////////////////////////////////////////////////
/// @brief Main driver.
/// @return Success/fail
int
main() {
  Unprotected ua{5};
  Unprotected ub = Unprotected(7) += ua;
  cout << ub.get() << endl;

  Protected pa{5};
  //Protected pb = Protected(7) += pa; // Error, albeit confusing error message.
}